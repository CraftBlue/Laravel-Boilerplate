# Craft Blue's Laravel Boilerplate

We built a boilerplate Laravel application to ensure web applications built by [Craft Blue](https://www.craftblue.com)
maintain a consistent set of standards for ourselves and our clients. 

utilize our most commonly used vendor services.


### Installation and Configuration ###

## Navigation

* Default Config Values 
* Packages Chosen
* Authentication
* OAUth2 API Server
* User Access Control (ACL)
* Rate Limiting
* Suggested Additions


## Default Config Values

You still need to run `key:generate`.

* Redis has been chosen as the default cache.
* Redis has been chosen as the default queue storage.
* Redis has been chosen as the default session storage.
* Beanstalk has been chosen as the default queue handler.
* MySQL has been chosen as the default database. Substitute your server  MariaDB if you'd like.
* File has been chosen as the default storage disk.

## Packages Chosen

* **forms** [laravelcollective/html](https://github.com/LaravelCollective/html)
* **debugging** [varryvdh/laravel-debugbar](https://github.com/barryvdh/laravel-debugbar)
* **development** [itsgoingd/clockwork](https://github.com/itsgoingd/clockwork) The server-side component of CLockword, a chrome extension for speeding up PHP development.
* **logging** [jenssegers/agent](https://github.com/jenssegers/agent) For enhanced logging of user agent strings as well as robot detection
* **scalability** [webpatser/laravel-uuid](https://github.com/webpatser/laravel-uuid) For UUID generation to support a global UUID lookup table
* **rate limiting** [GrahamCampbell/Laravel-Throttle]() for more full featured throttling API requests
* **logging** [spatie/laravel-activitylog](https://github.com/spatie/laravel-activitylog) For adding the ability to log user interactions with the admin/API for accountability, record keeping, or trace history.

* **security** [DavidePastore/composer-audit](https://github.com/DavidePastore/composer-audit) For auditing the currently installed composer packages for security vulneratibilities tracked by SensioLabs Security Checker.
* **security** [jinglejangle/decomposer]()


## Automation with Travis CI ##

https://www.fastfwd.com/continuous-integration-laravel-travis-ci/
https://gist.github.com/gilbitron/5cac0ac5fa07e9b354ac

## Authentication


## Pre-Configured API

Laravel Passport has been pre-configured to give you OAUTH2 client/server functionality.

TODO: You still need to generate your own keys.


## Access Control (ACL)

Access control is managed by the [`spatie/laravel-permission`](https://github.com/spatie/laravel-permission) library.

Defaults roles have been added for `user`, `admin`, and `superadmin`.

Default permissions have been added for ``.



## Organizing and Creating Routes

You can organize routes into individual, role based files.

You can do this by including your route file in `app/Providers/RouteServiceProvider.php`. If you add a new route file to the `routes/` directory (i.e. `routes/admin.php`), you would add the following to `RouteServiceProvider.php`:

```php
    /**
     * Define the "web" routes for the application.
     *
     * These routes all receive session state, CSRF protection, etc.
     *
     * @return void
     */
    protected function mapWebRoutes()
    {
     	Route::middleware('web')
             ->namespace($this->namespace)
             ->group(base_path('routes/web.php'))
             ->group(base_path('routes/admin.php'));
    }
```

## Suggested Additions

* [Node Security Platform - monitor](https://nodesecurity.io/) Subscribe and ensure that every Github pull request is audited for vulnerabilities in your current npm includes found in your `package.json` file.
* [DependencyCI](https://dependencyci.com/) If you are creating an open source project, there's no reason not to use Dependency CI for auditing dependencies for vulnerabilities.
* [Libraries.io](https://libraries.io/)
* 

* Either [tymondesigns/jwt-auth](https://github.com/tymondesigns/jwt-auth) or [barryvdh/laravel-cors](https://github.com/barryvdh/laravel-cors)
* Laravel Spark - If you need to integrate with a payment API to provide subscription based billing to your SaaS application.
* Laravel Cashier - If you need to integrate with a payment API but don't need the subscription services associated with Laravel Spark.
* Laravel Dusk - Laravel Dusk provides an expressive, easy-to-use browser automation and testing API.
* Laravel Echo -

* [laravelcollective/html](https://github.com/LaravelCollective/html) - [packagist link](https://packagist.org/packages/laravelcollective/html)
* 

* **soap** [artisaninweb/laravel-soap](https://github.com/artisaninweb/laravel-soap) if you need to build clients to interact with SOAP APIs.
* 

* **documentation**: [dingo/blueprint]() for generating and managing documentation of your app.
* **social login**:[laravel/socialite]() for social login (i.e. .
* **validation**: [laravel-ardent/ardent]() for self-validating, secure and smart models via Eloquent ORM
* **sitemaps** [Laravelium/laravel-sitemap]() for generating a sitemap to submit to Google Webmaster Tools.
* **backups**: [spatie/laravel-backup]() for backing up the entirety of your Laravel application and giving you the ability to 
* **GeoIP** [Torann/laravel-geoip]() for checking a user's IP address, 
* **GeoIP** [geoip2/geoip2 ~2.1]() for interacting with the MaxMind API, required by `Torann/laravel-geoip`
* **geocoding** [geocoder-php/GeocoderLaravel]() for interacting with a huge selection of geocoder based APIs such as Google Maps or MaxMind.
* **push notifications ** [pusher/pusher-php-server](https://github.com/pusher/pusher-http-php) if interacting with Pusher via Laravel Broadcast.
* **recaptcha** [anhskohbo/no-captcha](https://github.com/anhskohbo/no-captcha) if you need to implement Google's No CAPTCHA RECAPTA into web forms.
* **ecommerce** [Crinsane/LaravelShoppingcart]() if you need to build a custom shopping card.
* **validation** [inacho/php-credit-card-validator]() if you need to handle validation of credit card numbers (i.e. the luhn algorithm).
* **graphing and charting** [kevinkhill/lavacharts]() if you need to interact with Google Charts to build charts.
* **user notifications** [prologuephp/alerts]() if you need to build a user notification system such as global site messaging.
* **SMS** [aloha/laravel-twilio]() if you need to build an SMS or VOIP solution such as SMS verification or mobile phone verification.
* **geography** [webpatser/laravel-countries]() if you want access to a relatively in-depth country metadata database table and helper methods. 
* **analytics** [spatie/laravel-analytics]() if you need to integrate Google Analytics results into an admin dashboard.
* **ticketing** [Attendize/Attendize]() a ticket selling and event management platform
* **event management** [Attendize/Attendize]() a ticket selling and event management platform

* **fraud detection** [pablumfication/laravel-sift-science]() for integration with Sift Science for detecting credit card fraud.

#### TODO ####

* **fraud detection** [ilanco/laravel-maxmind-minfraud]() for integration with the popular MaxMind Minfraud API for detecting credit card fraud.

